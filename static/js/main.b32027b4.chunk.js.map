{"version":3,"sources":["components/Pokemon.js","components/PokemonHighlighter.js","components/PokemonList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","_ref","index","name","types","onClick","image","isShiny","concat","react_default","a","createElement","className","padStart","map","_ref2","type","key","src","alt","PokemonHighlighter","stats","stat","style","width","base_stat","apiHost","PokemonList","state","pokemon","currentPokemon","offset","url","_this2","this","fetchData","setState","loading","fetch","then","res","json","promises","results","data","_objectSpread","replace","split","pop","sort","b","slot","Promise","all","window","addEventListener","event","doneLoading","document","documentElement","offsetHeight","scrollY","innerHeight","newOffset","prevState","length","Object","toConsumableArray","_this3","_this$state","allPokemon","react","assign","props","React","Component","Pokedex","href","PokemonList_PokemonList","Boolean","location","hostname","match","ReactDOM","render","App_Pokedex","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b32027b4.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function({index, name, types, onClick, isShiny}) {\n  const image = isShiny \n    ? `http://cursist38.reacollege.eu/sprites/shiny/${index}.png`\n    : `http://cursist38.reacollege.eu/sprites/${index}.png`\n\n  return ( \n    <div onClick={onClick} className=\"pokemonCard\">\n      <div className=\"pokemonCardTop\">\n        <h3>#{index.padStart(3, '00')}</h3>\n        <h3>{name}</h3>\n      </div>\n      <div className=\"pokemonCardBot\">\n        <div className=\"typing\">\n          {types.map(({type: {name}}) => (\n            <span className={name} key={name} />\n          ))}\n        </div>\n        <div className=\"pokemonSprite\">\n          <img src={image} alt={name +'sprite'} />\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\n\nexport default function({index, name, types, stats, isShiny}) {\n  const image = isShiny \n    ? `http://cursist38.reacollege.eu/sprites/shiny/${index}.png`\n    : `http://cursist38.reacollege.eu/sprites/${index}.png`;\n\n  return ( \n    <div className=\"pokemonCard\">\n      <div className=\"pokemonCardTop\">\n        <h3>{name}</h3>\n        <h3>#{index.padStart(3, '00')}</h3>\n      </div>\n      <div className=\"pokemonCardBot\">\n        <div className=\"typing\">\n          {types.map(({type: {name}}) => (\n            <span className={name} key={name} />\n          ))}\n        </div>\n        <div className=\"pokemonSprite\">\n          <img src={image} alt={name +'sprite'} />\n        </div>\n        <div className=\"pokemonStats\">\n          {stats.map(stat => (\n            <div\n              className={stat.stat.name} \n              key={stat.stat.name}\n            >\n              <span>{stat.stat.name}</span>\n              <div className=\"progress\">\n                <div \n                  style={{ width: stat.base_stat / 2 + '%'  }}\n                  className={stat.stat.name + \"value\"}\n                >\n                 <span>{stat.base_stat}</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, {Fragment} from 'react';\nimport Pokemon from './Pokemon';\nimport PokemonHighlighter from './PokemonHighlighter';\n\nconst apiHost = process.env.NODE_ENV === 'development'\n  ? 'http://localhost:1337'\n  : 'https://pokeapi.co';\n\nexport default class PokemonList extends React.Component { \n  state = {\n    pokemon: null,\n    currentPokemon: null,\n    offset: 0,\n    url: `${apiHost}/api/v2/pokemon/?limit=25`\n  };\n\n  componentDidMount() {\n    const fetchData = () => {\n      this.setState({ loading: true });\n\n      return fetch(this.state.url)\n        .then(res => res.json())\n        .then(json => {\n          const promises = json.results.map(({name, url}) => {\n            return fetch(url)\n              .then(res => res.json())\n              .then(data => ({\n                name, \n                url, \n                index: url.replace(/\\/$/, '').split('/').pop(), \n                ...data,\n                types: data.types.sort((a, b) => a.slot - b.slot)\n              }))\n          });\n          return Promise.all(promises)\n            .then(pokemon => {\n              this.setState({ loading: false });\n              return pokemon;\n            });\n        })\n    };\n\n    window.addEventListener('scroll', event => {\n      if (this.state.loading || this.state.doneLoading) return;\n\n      const height = document.documentElement.offsetHeight;\n      const scrolled = window.scrollY + window.innerHeight;\n\n      if ((height * .85) <= scrolled) {\n        this.setState(state => {\n          const newOffset = state.offset + 25;\n\n          return {\n            ...state, \n            offset: newOffset,\n            url: `${apiHost}/api/v2/pokemon/?limit=25&offset=${newOffset}`\n          }\n        });\n\n        fetchData()\n          .then(pokemon =>\n            this.setState(prevState => ({ \n              doneLoading: pokemon.length === 0,\n              pokemon: [...prevState.pokemon, ...pokemon] \n            }))\n          );\n      }\n    });\n    fetchData().then(pokemon => this.setState({ pokemon, currentPokemon: pokemon[24] }));\n\n    // window.addEventListener('resize', () => {\n    //   console.log(window.innerWidth)\n    // });\n  };\n\n  render() {\n    const {pokemon: allPokemon, currentPokemon} = this.state;\n   \n\n    return (\n      <Fragment>\n        {allPokemon ? \n          <Fragment>\n            <div className=\"pokedexContainer\">\n              {allPokemon.map(pokemon => (\n                <Pokemon\n                  onClick={() => {\n                    this.setState({ currentPokemon: pokemon });\n                  }}\n                  key={pokemon.name}\n                  isShiny={this.props.isShiny}\n                  {...pokemon}\n                />\n              ))}\n            </div>\n            <div className=\"highlighter\">\n              {currentPokemon ?\n                <PokemonHighlighter\n                  key={currentPokemon}\n                  isShiny={this.props.isShiny}\n                  {...currentPokemon}\n                />\n              : this.setState({currentPokemon: 25})}\n            </div>\n          </Fragment>\n        : <h2>Loading Pokedex</h2>}\n      </Fragment>\n    );\n  };\n};","import React from 'react';\nimport './styles/App.sass';\nimport './styles/PokemonTyping.sass';\n\nimport PokemonList from './components/PokemonList';\n\nexport default class Pokedex extends React.Component {\n  state = {\n    isShiny: false\n  };\n\n  render() {\n    const toggleShiny = () => {\n      return this.state.isShiny\n        ? this.setState({ isShiny: false })\n        : this.setState({ isShiny: true });\n    };\n\n    return (\n      <div className=\"container\">\n        <header className=\"header\">\n          <a href=\"https://julicolo.github.io/react-pokedex\">Pokedex</a>\n          <button onClick={toggleShiny}>Toggle Shinies!</button>\n        </header>\n        <div className=\"main\">\n          <PokemonList \n            isShiny={this.state.isShiny}\n           />\n        </div>\n      </div>\n    );\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}