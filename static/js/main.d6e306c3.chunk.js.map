{"version":3,"sources":["components/Pokemon.js","components/PokemonList.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","state","image","concat","_this","props","index","types","stats","console","log","this","react_default","a","createElement","className","padStart","name","map","_ref","slot","type","key","src","alt","React","Component","apiHost","PokemonList","pokemon","url","_this2","fetch","then","res","json","promises","results","data","Object","objectSpread","replace","split","pop","Promise","all","setState","allPokemon","react","Pokemon_Pokemon","assign","Pokedex","href","placeholder","PokemonList_PokemonList","Boolean","window","location","hostname","match","ReactDOM","render","App_Pokedex","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAEqBA,6MACnBC,MAAQ,CACNC,MAAK,0CAAAC,OAA4CC,EAAKC,MAAMC,MAAvD,QACLC,MAAOH,EAAKC,MAAMG,+EAOlB,OAFAC,QAAQC,IAAIC,KAAKN,OAGfO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACdH,EAAAC,EAAAC,cAAA,cAAMH,KAAKN,MAAMC,MAAMU,SAAS,EAAG,MAAnC,IAA2CL,KAAKN,MAAMY,OAEvDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZJ,KAAKN,MAAME,MAAMW,IAAI,SAAAC,KAAEC,KAAF,IAAeH,EAAfE,EAAQE,KAAOJ,KAAf,OACpBL,EAAAC,EAAAC,cAAA,QAAMQ,IAAKL,GAAOA,MAGvBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,aAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKS,IAAKZ,KAAKV,MAAMC,MAAOsB,IAAKb,KAAKN,MAAMY,KAAM,qBA3BzBQ,IAAMC,WCErCC,EAEF,qBAGiBC,6MACnB3B,MAAQ,CACN4B,QAAS,KACTC,IAAG,GAAA3B,OAAKwB,EAAL,oBACHnB,MAAO,uFAGW,IAAAuB,EAAApB,KAClBqB,MAAMrB,KAAKV,MAAM6B,KACdG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJ,IAAMC,EAAWD,EAAKE,QAAQnB,IAAI,SAAAC,GAAiB,IAAfF,EAAeE,EAAfF,KAAMa,EAASX,EAATW,IAExC,OAAOE,MAAMF,GACVG,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAK,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,CAAMtB,OAAMa,MAAKxB,MAAOwB,EAAIW,QAAQ,MAAO,IAAIC,MAAM,KAAKC,OAAUL,OAElF,OAAOM,QAAQC,IAAIT,KAEpBH,KAAK,SAAAJ,GAAO,OAAIE,EAAKe,SAAS,CAAEjB,+CAG5B,IACSkB,EAAcpC,KAAKV,MAA5B4B,QAEP,OACEjB,EAAAC,EAAAC,cAACkC,EAAA,SAAD,KACGD,EACCnC,EAAAC,EAAAC,cAACkC,EAAA,SAAD,KACGD,EAAW7B,IAAI,SAAAW,GAAO,OACrBjB,EAAAC,EAAAC,cAACmC,EAADV,OAAAW,OAAA,CACE5B,IAAKO,EAAQZ,MACTY,OAIVjB,EAAAC,EAAAC,cAAA,qCApC+BW,IAAMC,WCH1ByB,mLAEjB,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,KAAGsC,KAAK,4CAAR,WACAxC,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOgC,YAAY,2BAEjCzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACwC,EAAD,eAT2B7B,IAAMC,WCMvB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.d6e306c3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Pokemon extends React.Component { \r\n  state = {\r\n    image: `http://cursist38.reacollege.eu/sprites/${this.props.index}.png`,\r\n    types: this.props.stats \r\n  };\r\n\r\n\r\n  render() {\r\n    console.log(this.props)\r\n\r\n    return ( \r\n      <div className=\"pokemonCard\">\r\n        <div className=\"pokemonCardTop\">\r\n          <div className=\"pokemonName\">\r\n           <h2>#{this.props.index.padStart(3, '00')} {this.props.name}</h2>\r\n          </div>\r\n          <div className=\"typing\">\r\n            {this.props.types.map(({slot, type: {name}}) => (\r\n              <span key={name}>{name}</span>\r\n            ))}\r\n          </div>\r\n         <div className=\"pokemonIndex\">\r\n            <h2>{}</h2>\r\n          </div>\r\n        </div>\r\n        <div className=\"pokemonCardBot\">\r\n          <div className=\"pokemonSprite\">\r\n            <img src={this.state.image} alt={this.props.name +'sprite'} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, {Fragment} from 'react';\r\n\r\nimport Pokemon from './Pokemon';\r\n\r\nconst apiHost = process.env.NODE_ENV === 'development'\r\n  ? 'http://localhost:1337'\r\n  : 'https://pokeapi.co';\r\n\r\n\r\nexport default class PokemonList extends React.Component { \r\n  state = {\r\n    pokemon: null,\r\n    url: `${apiHost}/api/v2/pokemon/`,\r\n    stats: {}\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(this.state.url)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const promises = json.results.map(({name, url}) => {\r\n\r\n          return fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => ({name, url, index: url.replace(/\\/$/, '').split('/').pop(), ...data}))\r\n        });\r\n        return Promise.all(promises);\r\n      })\r\n      .then(pokemon => this.setState({ pokemon }));\r\n  };\r\n\r\n  render() {\r\n    const {pokemon: allPokemon} = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        {allPokemon ? \r\n          <Fragment>\r\n            {allPokemon.map(pokemon => (\r\n              <Pokemon\r\n                key={pokemon.name}\r\n                {...pokemon}\r\n              />\r\n            ))}\r\n          </Fragment>\r\n        : <h2>Loading Pokedex</h2>}\r\n      </Fragment>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './styles/App.sass';\r\n\r\nimport PokemonList from './components/PokemonList';\r\n// PokemonList is responsible for fetching all the data and formatting it\r\n\r\nexport default class Pokedex extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <a href=\"https://julicolo.github.io/react-pokedex\">Pokedex</a>\r\n          <input type=\"text\" placeholder=\"Search for a Pokemon!\" />\r\n        </header>\r\n        <div className=\"main\">\r\n          <PokemonList />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}