{"version":3,"sources":["components/layout/Header.js","components/pokemon/PokemonCard.js","components/pokemon/PokemonList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","React","Component","PokemonCard","state","name","image","id","_this$props","this","props","url","PokemonList","pokemon","fetch","then","res","json","data","_this2","setState","Fragment","map","PokemonCard_PokemonCard","key","Pokedex","Header_Header","PokemonList_PokemonList","Boolean","window","location","hostname","match","ReactDOM","render","App_Pokedex","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAEqBA,0LAEjB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,4CAAR,mBAJ4BC,IAAMC,mCCArBC,6MACnBC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,GAAI,4EAIG,IAAAC,EACaC,KAAKC,MAAlBL,EADAG,EACAH,KADAG,EACMG,IAEb,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAKO,IAEPT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAhBkBE,IAAMC,WCG1BU,6MACnBR,MAAQ,CACNO,IAAK,+CACLE,QAAS,4MAITC,MAAML,KAAKL,MAAMO,KACdI,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIC,EAAKC,SAAS,CAAEP,QAASK,EAAI,+IAGtC,IACAL,EAAWJ,KAAKL,MAAhBS,QAEP,OACEjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,KACGR,EACCjB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,SAAP,KACGR,EAAQS,IAAI,SAAAT,GAAO,OAClBjB,EAAAC,EAAAC,cAACyB,EAAD,CACEC,IAAKX,EAAQR,KACbA,KAAMQ,EAAQR,KACdM,IAAKE,EAAQF,SAInBf,EAAAC,EAAAC,cAAA,6BA3B+BG,IAAMC,WCE1BuB,mLAGjB,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACdH,EAAAC,EAAAC,cAAC6B,EAAD,eAP2B1B,IAAMC,WCKvB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.d8634e74.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Header extends React.Component { \r\n  render() {\r\n    return (\r\n      <header className=\"header\">\r\n        <a href=\"https://julicolo.github.io/react-pokedex\">Pokedex</a>\r\n      </header>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class PokemonCard extends React.Component {\r\n  state = {\r\n    name: '',\r\n    image: '',\r\n    id: ''\r\n  }\r\n\r\n\r\n  render() {\r\n    const {name, url} = this.props;\r\n\r\n    return (\r\n      <div className=\"pokemonCard\">\r\n        <div className=\"pokemonName\">\r\n          <h2>{name}</h2>\r\n        </div>\r\n        <div className=\"pokemonSprite\">\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nimport PokemonCard from './PokemonCard';\r\n\r\n\r\nexport default class PokemonList extends React.Component { \r\n  state = {\r\n    url: 'https://pokeapi.co/api/v2/pokemon/?limit=964',\r\n    pokemon: null // reserve value for fetch result\r\n  };\r\n\r\n  async componentDidMount() {\r\n    fetch(this.state.url)\r\n      .then(res => res.json())\r\n      .then(data => this.setState({ pokemon: data['results'] }))\r\n  };\r\n\r\n  render() {\r\n    const {pokemon} = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {pokemon ? \r\n          <React.Fragment>\r\n            {pokemon.map(pokemon => (\r\n              <PokemonCard \r\n                key={pokemon.name}\r\n                name={pokemon.name}\r\n                url={pokemon.url}\r\n              />\r\n            ))}\r\n          </React.Fragment>\r\n        : <h2>Loading</h2>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport './styles/App.sass';\r\n\r\nimport Header from './components/layout/Header';\r\n// import PokemonCard from './components/pokemon/PokemonCard';\r\nimport PokemonList from './components/pokemon/PokemonList';\r\n\r\nexport default class Pokedex extends React.Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <main className=\"main\">\r\n          <PokemonList />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}